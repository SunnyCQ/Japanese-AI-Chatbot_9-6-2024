1. Put everything into a class (making it more organized to use the API)

Chatbot AI portion is basic, the hard part is the packaging (frontend)

Make a class to package the chatbot in a nice way DONE

Goal is to make a nice looking webpage that portion

Chatbot functions:
Conversation partner: 
 - user talks in japanese
 - chatbot responds in japanese

Japanese teacher:
 - ask a question abt japanese in english
 - answers it
 - reject/ignore any questions about misc topics

Terminal functions (hard-coded):
List commands:
 - type '/help' and it'll list a bunch of commands

Add to word bank:
 - type '/add {japanese word}' and it'll create a flashcard
 - flashcard will contain term and definition
 - definition will be generated by the chatbot/API

Delete from word bank:
 - type '/del {japanese word}' and it'll remove it from the database
 - print an error message if it doesn't exist

List flashcards:
 - type '/list 



List of things needed:
 - Chatbot (OpenAI API) DONE
 - Python main script DONE
 - React (frontend)
 - Flask (backend)
 - Bootstrap (library for CSS)
 - Docker
 - Put conversation log in separate txt file


Postman:
Good for testing website sending recieving data
Use return instead of print(). Print doesn't actually show anything on webpage
Put url in and you can edit KEY (your parameter name) and VALUE (what is parameter is set as)
i.e 'user_input' would be KEY, and 'how do i say ...' would be in VALUE

URL: http://127.0.0.1:5000

Structure:
@app.route('/test1', methods=['GET'])
def test1(): #NO PARAMETERS
    return "this is webpage 1

@app.route('/test2', methods=['GET'])
def test2(): #NO PARAMETERS
    user_input = request.args.get('user_input') #THIS IS YOUR PARAMETER
    return user_input

app.run()

tl;dr, app.route each manages one subpage. app.run() is put at the very end to actually start it. 
Using flask, you will not need (and should avoid) infinite while loop. Just let the webpage be the loop.

9/9/2024:
Made the flask portion working (sends and receives stuff normally)

Made basic chat and messaging interface

Video: https://www.youtube.com/watch?v=Lag9Pj_33hM 
(idk how much more helpful it is though because we already have all the chatgpt stuff running)

To run React website: 
    - cd into the app folder
    - type: 'npm run dev'

    P.S. When you restart python server, no need to restart react server.

NEXT TIME:
    - Make it possible to save chat history
        - Start collecting the messages into the chat history
        - Also retrieve it whenever server starts up  
            - Gotta correspond specific user to the chatbot chat history
    - Make a user login system so that we can have multiple users at the same time  
    - Make flashcards and flashcard decks possible
    - Make them saved on the database and retrievable from it



